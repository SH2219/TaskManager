[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "isExtraImport": true,
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "isExtraImport": true,
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "CommentRead",
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "isExtraImport": true,
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "comment_service",
        "importPath": "app.services.comment_service",
        "description": "app.services.comment_service",
        "isExtraImport": true,
        "detail": "app.services.comment_service",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "user_service",
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "isExtraImport": true,
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "user_service",
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "isExtraImport": true,
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "user_repo",
        "importPath": "app.crud.user_repo",
        "description": "app.crud.user_repo",
        "isExtraImport": true,
        "detail": "app.crud.user_repo",
        "documentation": {}
    },
    {
        "label": "user_repo",
        "importPath": "app.crud.user_repo",
        "description": "app.crud.user_repo",
        "isExtraImport": true,
        "detail": "app.crud.user_repo",
        "documentation": {}
    },
    {
        "label": "ProjectCreate",
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "isExtraImport": true,
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "ProjectOut",
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "isExtraImport": true,
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "project_service",
        "importPath": "app.services.project_service",
        "description": "app.services.project_service",
        "isExtraImport": true,
        "detail": "app.services.project_service",
        "documentation": {}
    },
    {
        "label": "TagCreate",
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "isExtraImport": true,
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "TagUpdate",
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "isExtraImport": true,
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "TagRead",
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "isExtraImport": true,
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "tag_service",
        "importPath": "app.services.tag_service",
        "description": "app.services.tag_service",
        "isExtraImport": true,
        "detail": "app.services.tag_service",
        "documentation": {}
    },
    {
        "label": "TaskCreate",
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "isExtraImport": true,
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskUpdate",
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "isExtraImport": true,
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskOut",
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "isExtraImport": true,
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "task_service",
        "importPath": "app.services.task_service",
        "description": "app.services.task_service",
        "isExtraImport": true,
        "detail": "app.services.task_service",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenOut",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "app.models.comment",
        "description": "app.models.comment",
        "isExtraImport": true,
        "detail": "app.models.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "app.models.comment",
        "description": "app.models.comment",
        "isExtraImport": true,
        "detail": "app.models.comment",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.models.project",
        "description": "app.models.project",
        "isExtraImport": true,
        "detail": "app.models.project",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "app.models.project",
        "description": "app.models.project",
        "isExtraImport": true,
        "detail": "app.models.project",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "app.models.tag",
        "description": "app.models.tag",
        "isExtraImport": true,
        "detail": "app.models.tag",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "app.models.tag",
        "description": "app.models.tag",
        "isExtraImport": true,
        "detail": "app.models.tag",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "app.models.task",
        "description": "app.models.task",
        "isExtraImport": true,
        "detail": "app.models.task",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "app.models.task",
        "description": "app.models.task",
        "isExtraImport": true,
        "detail": "app.models.task",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "task_tags",
        "importPath": "app.models.association_tables",
        "description": "app.models.association_tables",
        "isExtraImport": true,
        "detail": "app.models.association_tables",
        "documentation": {}
    },
    {
        "label": "task_assignees",
        "importPath": "app.models.association_tables",
        "description": "app.models.association_tables",
        "isExtraImport": true,
        "detail": "app.models.association_tables",
        "documentation": {}
    },
    {
        "label": "task_tags",
        "importPath": "app.models.association_tables",
        "description": "app.models.association_tables",
        "isExtraImport": true,
        "detail": "app.models.association_tables",
        "documentation": {}
    },
    {
        "label": "the Table object",
        "importPath": "app.models.association_tables import task_assignees  #",
        "description": "app.models.association_tables import task_assignees  #",
        "isExtraImport": true,
        "detail": "app.models.association_tables import task_assignees  #",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "comment_repo",
        "importPath": "app.crud.comment_repo",
        "description": "app.crud.comment_repo",
        "isExtraImport": true,
        "detail": "app.crud.comment_repo",
        "documentation": {}
    },
    {
        "label": "task_repo",
        "importPath": "app.crud.task_repo",
        "description": "app.crud.task_repo",
        "isExtraImport": true,
        "detail": "app.crud.task_repo",
        "documentation": {}
    },
    {
        "label": "project_repo",
        "importPath": "app.crud.project_repo",
        "description": "app.crud.project_repo",
        "isExtraImport": true,
        "detail": "app.crud.project_repo",
        "documentation": {}
    },
    {
        "label": "tag_repo",
        "importPath": "app.crud.tag_repo",
        "description": "app.crud.tag_repo",
        "isExtraImport": true,
        "detail": "app.crud.tag_repo",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.users_router",
        "description": "app.api.users_router",
        "isExtraImport": true,
        "detail": "app.api.users_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.projects_router",
        "description": "app.api.projects_router",
        "isExtraImport": true,
        "detail": "app.api.projects_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.tasks_router",
        "description": "app.api.tasks_router",
        "isExtraImport": true,
        "detail": "app.api.tasks_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.tags_router",
        "description": "app.api.tags_router",
        "isExtraImport": true,
        "detail": "app.api.tags_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.comments_router",
        "description": "app.api.comments_router",
        "isExtraImport": true,
        "detail": "app.api.comments_router",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.comments_router",
        "description": "app.api.comments_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.post(\"/tasks/{task_id}/comments\", response_model=CommentRead, status_code=status.HTTP_201_CREATED)\nasync def create_comment(\n    task_id: int = Path(..., ge=1),\n    payload: CommentCreate = Body(...),\n    db: AsyncSession = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    \"\"\"",
        "detail": "app.api.comments_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.comments_router",
        "description": "app.api.comments_router",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/tasks/{task_id}/comments\", response_model=CommentRead, status_code=status.HTTP_201_CREATED)\nasync def create_comment(\n    task_id: int = Path(..., ge=1),\n    payload: CommentCreate = Body(...),\n    db: AsyncSession = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    \"\"\"\n    Create a comment on a task. The task_id in path must match payload.task_id (for safety).",
        "detail": "app.api.comments_router",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/users/login\")\nasync def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db)) -> User:\n    user_id = user_service.decode_access_token(token)\n    if not user_id:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid token\")\n    user = await user_repo.get(db, user_id)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    return user",
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.projects_router",
        "description": "app.api.projects_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(prefix=\"/projects\", tags=[\"Projects\"])\n# Create a new project\n@router.post(\"/\", response_model=ProjectOut)\nasync def create_project(payload: ProjectCreate, db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):\n    return await project_service.create_project(db, name=payload.name, description=payload.description)\n# List all projects\n@router.get(\"/\", response_model=List[ProjectOut])\nasync def list_projects(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):\n    return await project_service.list_projects(db, skip=skip, limit=limit)",
        "detail": "app.api.projects_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.projects_router",
        "description": "app.api.projects_router",
        "peekOfCode": "router = APIRouter(prefix=\"/projects\", tags=[\"Projects\"])\n# Create a new project\n@router.post(\"/\", response_model=ProjectOut)\nasync def create_project(payload: ProjectCreate, db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):\n    return await project_service.create_project(db, name=payload.name, description=payload.description)\n# List all projects\n@router.get(\"/\", response_model=List[ProjectOut])\nasync def list_projects(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db), user=Depends(get_current_user)):\n    return await project_service.list_projects(db, skip=skip, limit=limit)\n# --- Edit project (partial update) ---",
        "detail": "app.api.projects_router",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.tags_router",
        "description": "app.api.tags_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.post(\"/\", response_model=TagRead, status_code=status.HTTP_201_CREATED)\nasync def create_tag(payload: TagCreate = Body(...), db:AsyncSession= Depends(get_db), current_user = Depends(get_current_user)):\n    \"\"\"\n    Create a new tag. (Requires authentication.)\n    \"\"\"\n    try:\n        tag = await tag_service.create_tag(db, name = payload.name, color= payload.color, description=payload.description)\n        return TagRead.model_validate(tag, from_attributes=True)",
        "detail": "app.api.tags_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.tags_router",
        "description": "app.api.tags_router",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/\", response_model=TagRead, status_code=status.HTTP_201_CREATED)\nasync def create_tag(payload: TagCreate = Body(...), db:AsyncSession= Depends(get_db), current_user = Depends(get_current_user)):\n    \"\"\"\n    Create a new tag. (Requires authentication.)\n    \"\"\"\n    try:\n        tag = await tag_service.create_tag(db, name = payload.name, color= payload.color, description=payload.description)\n        return TagRead.model_validate(tag, from_attributes=True)\n    except ValueError as exc:",
        "detail": "app.api.tags_router",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.tasks_router",
        "description": "app.api.tasks_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(prefix=\"/tasks\", tags=[\"Tasks\"])\n@router.post(\"/\", response_model=TaskOut, status_code=status.HTTP_201_CREATED)\nasync def create_task(\n    payload: TaskCreate = Body(...),\n    db: AsyncSession = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    # Normalize/validate parent id\n    parent_id = getattr(payload, \"parent_task_id\", None)",
        "detail": "app.api.tasks_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.tasks_router",
        "description": "app.api.tasks_router",
        "peekOfCode": "router = APIRouter(prefix=\"/tasks\", tags=[\"Tasks\"])\n@router.post(\"/\", response_model=TaskOut, status_code=status.HTTP_201_CREATED)\nasync def create_task(\n    payload: TaskCreate = Body(...),\n    db: AsyncSession = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    # Normalize/validate parent id\n    parent_id = getattr(payload, \"parent_task_id\", None)\n    if parent_id is not None:",
        "detail": "app.api.tasks_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.users_router",
        "description": "app.api.users_router",
        "peekOfCode": "router = APIRouter()  # <--- NO prefix here\n@router.post(\"/register\", response_model=UserOut, status_code=status.HTTP_201_CREATED)\nasync def register(payload: UserCreate, db=Depends(get_db)):\n    user = await user_service.create_user(db=db, email=payload.email, password=payload.password, name=payload.name)\n    print(\"Created user:\", user.id)\n    return user\n@router.post(\"/login\", response_model=TokenOut)\nasync def login(form_data: OAuth2PasswordRequestForm = Depends(), db=Depends(get_db)):\n    # OAuth2 form uses 'username' for email\n    user = await user_service.authenticate_user(db=db, email=form_data.username, password=form_data.password)",
        "detail": "app.api.users_router",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL is not set in the .env file\")\n# Create async SQLAlchemy engine\nengine = create_async_engine(\n    DATABASE_URL,\n    echo=True,  # Set to False in production\n    future=True\n)\n# Async session factory",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "engine = create_async_engine(\n    DATABASE_URL,\n    echo=True,  # Set to False in production\n    future=True\n)\n# Async session factory\nasync_session = sessionmaker(\n    bind=engine,\n    expire_on_commit=False,\n    class_=AsyncSession",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "async_session = sessionmaker(\n    bind=engine,\n    expire_on_commit=False,\n    class_=AsyncSession\n)\n# Base class for models\nBase = declarative_base()\n# Dependency to inject DB session into FastAPI routes\nasync def get_db():\n    async with async_session() as session:",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "Base = declarative_base()\n# Dependency to inject DB session into FastAPI routes\nasync def get_db():\n    async with async_session() as session:\n        try:\n            yield session\n        except:\n            await session.rollback()\n            raise",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "CommentRepo",
        "kind": 6,
        "importPath": "app.crud.comment_repo",
        "description": "app.crud.comment_repo",
        "peekOfCode": "class CommentRepo:\n    async def get(self, db:AsyncSession, comment_id:int) -> Optional[Comment]:\n        q= select(Comment).where(Comment.id==comment_id)\n        result= await db.execute(q)\n        return result.scalars().one_or_none()\n    async def list_by_task(self, db:AsyncSession, task_id:int, skip:int=0, limit:int=100)-> list[Comment]:\n        q= select(Comment).where(Comment.task_id == task_id).order_by(Comment.created_at).offset(skip).limit(limit)\n        result= await db.execute(q)\n        return result.scalars().all()\n    async def create(self, db:AsyncSession,*, task_id:int, user_id:int | None=None, content:str)->Comment:",
        "detail": "app.crud.comment_repo",
        "documentation": {}
    },
    {
        "label": "comment_repo",
        "kind": 5,
        "importPath": "app.crud.comment_repo",
        "description": "app.crud.comment_repo",
        "peekOfCode": "comment_repo = CommentRepo()",
        "detail": "app.crud.comment_repo",
        "documentation": {}
    },
    {
        "label": "ProjectRepository",
        "kind": 6,
        "importPath": "app.crud.project_repo",
        "description": "app.crud.project_repo",
        "peekOfCode": "class ProjectRepository:\n    \"\"\"Repository layer for Project CRUD operations.\"\"\"\n    async def create(self, db: AsyncSession, *, name: str, description: str | None = None) -> Project:\n        \"\"\"Create a new project. Do NOT commit here.\"\"\"\n        project = Project(name=name, description=description)\n        db.add(project)\n        await db.flush()  # assign ID without committing\n        await db.refresh(project)\n        return project\n    async def get(self, db: AsyncSession, project_id: int) -> Optional[Project]:",
        "detail": "app.crud.project_repo",
        "documentation": {}
    },
    {
        "label": "project_repo",
        "kind": 5,
        "importPath": "app.crud.project_repo",
        "description": "app.crud.project_repo",
        "peekOfCode": "project_repo = ProjectRepository()",
        "detail": "app.crud.project_repo",
        "documentation": {}
    },
    {
        "label": "TagRepo",
        "kind": 6,
        "importPath": "app.crud.tag_repo",
        "description": "app.crud.tag_repo",
        "peekOfCode": "class TagRepo:\n    async def get(self, db: AsyncSession, tag_id: int) -> Optional[Tag]:\n        q = select(Tag).where(Tag.id == tag_id)\n        result = await db.execute(q)\n        # correct API: use scalars().one_or_none() to retrieve an ORM object or None\n        return result.scalars().one_or_none()\n    async def get_by_name(self, db: AsyncSession, name: str) -> Optional[Tag]:\n        q = select(Tag).where(Tag.name == name)\n        result = await db.execute(q)\n        return result.scalars().one_or_none()",
        "detail": "app.crud.tag_repo",
        "documentation": {}
    },
    {
        "label": "tag_repo",
        "kind": 5,
        "importPath": "app.crud.tag_repo",
        "description": "app.crud.tag_repo",
        "peekOfCode": "tag_repo = TagRepo()",
        "detail": "app.crud.tag_repo",
        "documentation": {}
    },
    {
        "label": "TaskRepository",
        "kind": 6,
        "importPath": "app.crud.task_repo",
        "description": "app.crud.task_repo",
        "peekOfCode": "class TaskRepository:\n    async def create(\n        self,\n        db: AsyncSession,\n        *,\n        title: str,\n        project_id: int,\n        creator_id: int | None = None,\n        description: str | None = None,\n        priority: int | None = 3,",
        "detail": "app.crud.task_repo",
        "documentation": {}
    },
    {
        "label": "task_repo",
        "kind": 5,
        "importPath": "app.crud.task_repo",
        "description": "app.crud.task_repo",
        "peekOfCode": "task_repo = TaskRepository()",
        "detail": "app.crud.task_repo",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.crud.user_repo",
        "description": "app.crud.user_repo",
        "peekOfCode": "class UserRepository:\n    \"\"\"Repository for User queries.\"\"\"\n    async def get(self, db: AsyncSession, user_id: int) -> Optional[User]:\n        result = await db.execute(select(User).where(User.id == user_id))\n        return result.scalars().first()\n    async def get_by_email(self, db: AsyncSession, email: str) -> Optional[User]:\n        result = await db.execute(select(User).where(User.email == email))\n        return result.scalars().first()\n    async def create(self, db: AsyncSession, *, email: str, password_hash: str, name: str | None = None) -> User:\n        user = User(email=email, password_hash=password_hash, name=name)",
        "detail": "app.crud.user_repo",
        "documentation": {}
    },
    {
        "label": "user_repo",
        "kind": 5,
        "importPath": "app.crud.user_repo",
        "description": "app.crud.user_repo",
        "peekOfCode": "user_repo = UserRepository()",
        "detail": "app.crud.user_repo",
        "documentation": {}
    },
    {
        "label": "task_assignees",
        "kind": 5,
        "importPath": "app.models.association_tables",
        "description": "app.models.association_tables",
        "peekOfCode": "task_assignees = Table(\n    \"task_assignees\",\n    Base.metadata,\n    Column(\"task_id\", BigInteger, ForeignKey(\"tasks.id\", ondelete=\"CASCADE\"), primary_key=True),\n    Column(\"user_id\", BigInteger, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True),\n    # you can add columns like assigned_at or assigned_by here if you need them\n)\n# Association table: tasks <-> tags\ntask_tags = Table(\n    \"task_tags\",",
        "detail": "app.models.association_tables",
        "documentation": {}
    },
    {
        "label": "task_tags",
        "kind": 5,
        "importPath": "app.models.association_tables",
        "description": "app.models.association_tables",
        "peekOfCode": "task_tags = Table(\n    \"task_tags\",\n    Base.metadata,\n    Column(\"task_id\", BigInteger, ForeignKey(\"tasks.id\", ondelete=\"CASCADE\"), primary_key=True),\n    Column(\"tag_id\", Integer, ForeignKey(\"tags.id\", ondelete=\"CASCADE\"), primary_key=True),\n)",
        "detail": "app.models.association_tables",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "app.models.comment",
        "description": "app.models.comment",
        "peekOfCode": "class Comment(Base):\n    __tablename__ = \"comments\"\n    id = Column(Integer, primary_key=True, index=True)\n    task_id = Column(Integer, ForeignKey(\"tasks.id\", ondelete=\"CASCADE\"), nullable=False, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"SET NULL\"), nullable=True, index=True)\n    content = Column(Text, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), nullable=False)\n    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)   \n    # relationships\\\n    task = relationship(\"Task\", back_populates=\"comments\", lazy=\"select\")",
        "detail": "app.models.comment",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "app.models.project",
        "description": "app.models.project",
        "peekOfCode": "class Project(Base):\n    __tablename__ = \"projects\"\n    id = Column(BigInteger, primary_key=True, index=True)\n    name = Column(Text, nullable=False)\n    description = Column(Text, nullable=True)\n    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\n    # one-to-many: project -> tasks\n    tasks = relationship(\"Task\", back_populates=\"project\", cascade=\"all, delete-orphan\", lazy=\"select\")\n    def __repr__(self):",
        "detail": "app.models.project",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "app.models.tag",
        "description": "app.models.tag",
        "peekOfCode": "class Tag(Base):\n    __tablename__ = \"tags\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100), nullable=False, index=True, unique=True)\n    color = Column(String(32), nullable=True)  # e.g., hex color code\n    description = Column(Text, nullable=True)\n    # relationship back to Task (Task must reference this secondary too)\n    tasks= relationship(\"Task\", secondary=task_tags, back_populates=\"tags\", lazy=\"select\")\n    def __repr__(self) -> str:\n        return f\"<Tag id={self.id} name={self.name!r}>\"",
        "detail": "app.models.tag",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "app.models.task",
        "description": "app.models.task",
        "peekOfCode": "class Task(Base):\n    __tablename__ = \"tasks\"\n    __table_args__ = (\n        Index(\"ix_tasks_project_id_status_due_at\", \"project_id\", \"status\", \"due_at\"),\n    )\n    id = Column(BigInteger, primary_key=True, index=True)\n    project_id = Column(BigInteger, ForeignKey(\"projects.id\", ondelete=\"CASCADE\"), nullable=False, index=True)\n    creator_id = Column(BigInteger, ForeignKey(\"users.id\", ondelete=\"SET NULL\"), nullable=True)\n    title = Column(Text, nullable=False)\n    description = Column(Text, nullable=True)",
        "detail": "app.models.task",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(BigInteger, primary_key=True, index=True)\n    email = Column(Text, unique=True, nullable=False, index=True)\n    name = Column(Text, nullable=True)\n    password_hash = Column(Text, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\n    # tasks that this user created (one-to-many)\n    created_tasks = relationship(\"Task\", back_populates=\"creator\", lazy=\"select\")",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "kind": 6,
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "peekOfCode": "class CommentCreate(BaseModel):\n    task_id:int\n    content:str\n    model_config = {\"extra\": \"forbid\"}\nclass CommentRead(BaseModel):\n    id:int\n    task_id:int\n    user_id:Optional[int]=None\n    content:str\n    created_at:Optional[datetime]=None",
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "CommentRead",
        "kind": 6,
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "peekOfCode": "class CommentRead(BaseModel):\n    id:int\n    task_id:int\n    user_id:Optional[int]=None\n    content:str\n    created_at:Optional[datetime]=None\n    updated_at:Optional[datetime]=None\n    # optional: include author summary later (id/name/email) if you want nested author info\n    model_config = {\"from_attributes\": True}\nclass CommentUpdate(BaseModel):",
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "kind": 6,
        "importPath": "app.schemas.comment_schema",
        "description": "app.schemas.comment_schema",
        "peekOfCode": "class CommentUpdate(BaseModel):\n    content: Optional[str] = None\n    model_config = {\"extra\": \"forbid\"}",
        "detail": "app.schemas.comment_schema",
        "documentation": {}
    },
    {
        "label": "ProjectCreate",
        "kind": 6,
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "peekOfCode": "class ProjectCreate(BaseModel):\n    name: str\n    description: Optional[str] = None\nclass ProjectRead(BaseModel):\n    id: int\n    name: str\n    description: Optional[str] = None\n    # Pydantic v2: read from ORM objects\n    model_config = {\"from_attributes\": True}\nclass ProjectUpdate(BaseModel):",
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "ProjectRead",
        "kind": 6,
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "peekOfCode": "class ProjectRead(BaseModel):\n    id: int\n    name: str\n    description: Optional[str] = None\n    # Pydantic v2: read from ORM objects\n    model_config = {\"from_attributes\": True}\nclass ProjectUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    model_config = {\"from_attributes\": True}",
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "ProjectUpdate",
        "kind": 6,
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "peekOfCode": "class ProjectUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    model_config = {\"from_attributes\": True}\n# Backwards-compatible alias used by some routers that expect ProjectOut\nProjectOut = ProjectRead",
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "ProjectOut",
        "kind": 5,
        "importPath": "app.schemas.project_schema",
        "description": "app.schemas.project_schema",
        "peekOfCode": "ProjectOut = ProjectRead",
        "detail": "app.schemas.project_schema",
        "documentation": {}
    },
    {
        "label": "TagCreate",
        "kind": 6,
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "peekOfCode": "class TagCreate(BaseModel):\n    name:str\n    color:Optional[str]=None        \n    description:Optional[str]=None\n    model_config = {\"extra\": \"forbid\"}\nclass TagRead(BaseModel):\n    id:int\n    name:str\n    color:Optional[str]=None\n    description:Optional[str]=None",
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "TagRead",
        "kind": 6,
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "peekOfCode": "class TagRead(BaseModel):\n    id:int\n    name:str\n    color:Optional[str]=None\n    description:Optional[str]=None\n    model_config = {\"from_attributes\": True}\nclass TagUpdate(BaseModel):\n    name: Optional[str] = None\n    color: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "TagUpdate",
        "kind": 6,
        "importPath": "app.schemas.tag_schema",
        "description": "app.schemas.tag_schema",
        "peekOfCode": "class TagUpdate(BaseModel):\n    name: Optional[str] = None\n    color: Optional[str] = None\n    description: Optional[str] = None\n    model_config = {\"extra\": \"forbid\"}",
        "detail": "app.schemas.tag_schema",
        "documentation": {}
    },
    {
        "label": "TaskCreate",
        "kind": 6,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "class TaskCreate(BaseModel):\n    title: str\n    description: Optional[str] = None\n    project_id: int\n    parent_task_id: Optional[int] = Field(default=None, description=\"Optional. Only provide for subtasks\")\n    assignee_ids: Optional[List[int]] = Field(default_factory=list)\n    due_at: Optional[datetime] = None\n    start_at: Optional[datetime] = None\n    estimated_minutes: Optional[int] = None\n    # forbid extra fields on creation payloads",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskReadBase",
        "kind": 6,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "class TaskReadBase(BaseModel):\n    id: int\n    title: str\n    description: Optional[str] = None\n    project_id: int\n    parent_task_id: Optional[int] = None\n    assignee_ids: List[int] = Field(default_factory=list)\n    due_at: Optional[datetime] = None\n    tag_ids: List[int] = Field(default_factory=list)   \n    comments_count: Optional[int] = None ",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskNested",
        "kind": 6,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "class TaskNested(TaskReadBase):\n    subtasks: List[\"TaskNested\"] = Field(default_factory=list)\nclass TaskUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    assignee_ids: Optional[List[int]] = None\n    due_at: Optional[datetime] = None\n    parent_task_id: Optional[int] = None\n    start_at: Optional[datetime] = None\n    estimated_minutes: Optional[int] = None",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskUpdate",
        "kind": 6,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "class TaskUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    assignee_ids: Optional[List[int]] = None\n    due_at: Optional[datetime] = None\n    parent_task_id: Optional[int] = None\n    start_at: Optional[datetime] = None\n    estimated_minutes: Optional[int] = None\n    version: Optional[int] = None\n    model_config = {\"from_attributes\": True}",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskRead",
        "kind": 6,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "class TaskRead(TaskReadBase):\n    subtasks: List[TaskNested] = Field(default_factory=list)\n# alias expected by other parts of your code\nTaskOut = TaskRead\n# resolve recursive models (Pydantic v2)\nTaskNested.model_rebuild()\nTaskRead.model_rebuild()",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "TaskOut",
        "kind": 5,
        "importPath": "app.schemas.task_schema",
        "description": "app.schemas.task_schema",
        "peekOfCode": "TaskOut = TaskRead\n# resolve recursive models (Pydantic v2)\nTaskNested.model_rebuild()\nTaskRead.model_rebuild()",
        "detail": "app.schemas.task_schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserCreate(BaseModel, OrmConfigMixin):\n    email: EmailStr\n    password: str  # caller-side validation: min length enforced in router/validator\n    name: Optional[str] = None\nclass UserOut(BaseModel, OrmConfigMixin):\n    id: int\n    email: EmailStr\n    name: Optional[str] = None\n    created_at: Optional[Any] = None\n    updated_at: Optional[Any] = None",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserOut(BaseModel, OrmConfigMixin):\n    id: int\n    email: EmailStr\n    name: Optional[str] = None\n    created_at: Optional[Any] = None\n    updated_at: Optional[Any] = None\nclass TokenOut(BaseModel, OrmConfigMixin):\n    access_token: str\n    token_type: str = \"bearer\"",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenOut",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class TokenOut(BaseModel, OrmConfigMixin):\n    access_token: str\n    token_type: str = \"bearer\"",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "_pyd_ver",
        "kind": 5,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "_pyd_ver = getattr(__import__(\"pydantic\"), \"__version__\", \"2.0\")\ntry:\n    _pyd_major = int(str(_pyd_ver).split(\".\")[0])\nexcept Exception:\n    _pyd_major = 2\nif _pyd_major >= 2:\n    # For pydantic v2: provide model_config only\n    class OrmConfigMixin:\n        model_config = {\"from_attributes\": True}\nelse:",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "CommentService",
        "kind": 6,
        "importPath": "app.services.comment_service",
        "description": "app.services.comment_service",
        "peekOfCode": "class CommentService:\n    async def create_comment(self, db: AsyncSession, creator_user_id: int, *, task_id: int, content: str) -> Comment:\n        # Validation: task must exist\n        task = await task_repo.get(db, task_id)\n        if not task:\n            raise ValueError(f\"Task not found (id={task_id})\")\n        comment = await comment_repo.create(db, task_id=task_id, user_id=creator_user_id, content=content)\n        await db.commit()\n        await db.refresh(comment)\n        return comment",
        "detail": "app.services.comment_service",
        "documentation": {}
    },
    {
        "label": "comment_service",
        "kind": 5,
        "importPath": "app.services.comment_service",
        "description": "app.services.comment_service",
        "peekOfCode": "comment_service = CommentService()",
        "detail": "app.services.comment_service",
        "documentation": {}
    },
    {
        "label": "ProjectService",
        "kind": 6,
        "importPath": "app.services.project_service",
        "description": "app.services.project_service",
        "peekOfCode": "class ProjectService:\n    \"\"\"Service layer for Project operations.\"\"\"\n    async def create_project(\n        self,\n        db: AsyncSession,\n        name: str,\n        description: str | None = None\n    ) -> Project:\n        \"\"\"Create a new project and commit to DB.\"\"\"\n        project = await project_repo.create(db, name=name, description=description)",
        "detail": "app.services.project_service",
        "documentation": {}
    },
    {
        "label": "project_service",
        "kind": 5,
        "importPath": "app.services.project_service",
        "description": "app.services.project_service",
        "peekOfCode": "project_service = ProjectService()",
        "detail": "app.services.project_service",
        "documentation": {}
    },
    {
        "label": "TagService",
        "kind": 6,
        "importPath": "app.services.tag_service",
        "description": "app.services.tag_service",
        "peekOfCode": "class TagService:\n    async def create_tag(self, db:AsyncSession, *, name : str, color:Optional[str]=None, description:Optional[str]=None)->Tag:\n        # Validation: name must be unique (case-sensitive here; adjust if you want case-insensitive)\n        existing = await tag_repo.get_by_name(db, name)\n        if existing:\n            raise ValueError(f\"Tag with name {name!r} already exists.\")\n        tag = await tag_repo.create(db, name=name, color=color, description=description)\n        await db.commit()\n        await db.refresh(tag)\n        return tag",
        "detail": "app.services.tag_service",
        "documentation": {}
    },
    {
        "label": "tag_service",
        "kind": 5,
        "importPath": "app.services.tag_service",
        "description": "app.services.tag_service",
        "peekOfCode": "tag_service = TagService()",
        "detail": "app.services.tag_service",
        "documentation": {}
    },
    {
        "label": "TaskService",
        "kind": 6,
        "importPath": "app.services.task_service",
        "description": "app.services.task_service",
        "peekOfCode": "class TaskService:\n    async def create_task(\n        self,\n        db: AsyncSession,\n        creator_id: int,\n        title: str,\n        project_id: int,\n        parent_task_id: Optional[int] = None,\n        assignee_ids: Optional[Iterable[int]] = None,\n        description: Optional[str] = None,",
        "detail": "app.services.task_service",
        "documentation": {}
    },
    {
        "label": "task_service",
        "kind": 5,
        "importPath": "app.services.task_service",
        "description": "app.services.task_service",
        "peekOfCode": "task_service = TaskService()",
        "detail": "app.services.task_service",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "class UserService:\n    \"\"\"Service layer for user operations.\"\"\"\n    # keep an async create_user for routers to await\n    async def create_user(self, db: AsyncSession, email: str, password: str, name: Optional[str] = None) -> User:\n        \"\"\"\n        Create a new user and persist to DB. Raises ValueError if email exists.\n        This is async so router can: await user_service.create_user(...)\n        \"\"\"\n        existing = await user_repo.get_by_email(db, email)\n        if existing:",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"replace-this-with-strong-secret\")\nALGORITHM = os.getenv(\"JWT_ALGORITHM\", \"HS256\")\n# env vars are strings; ensure we convert safely\nACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", \"1440\"))\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserService:\n    \"\"\"Service layer for user operations.\"\"\"\n    # keep an async create_user for routers to await\n    async def create_user(self, db: AsyncSession, email: str, password: str, name: Optional[str] = None) -> User:\n        \"\"\"",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "ALGORITHM = os.getenv(\"JWT_ALGORITHM\", \"HS256\")\n# env vars are strings; ensure we convert safely\nACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", \"1440\"))\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserService:\n    \"\"\"Service layer for user operations.\"\"\"\n    # keep an async create_user for routers to await\n    async def create_user(self, db: AsyncSession, email: str, password: str, name: Optional[str] = None) -> User:\n        \"\"\"\n        Create a new user and persist to DB. Raises ValueError if email exists.",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", \"1440\"))\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserService:\n    \"\"\"Service layer for user operations.\"\"\"\n    # keep an async create_user for routers to await\n    async def create_user(self, db: AsyncSession, email: str, password: str, name: Optional[str] = None) -> User:\n        \"\"\"\n        Create a new user and persist to DB. Raises ValueError if email exists.\n        This is async so router can: await user_service.create_user(...)\n        \"\"\"",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserService:\n    \"\"\"Service layer for user operations.\"\"\"\n    # keep an async create_user for routers to await\n    async def create_user(self, db: AsyncSession, email: str, password: str, name: Optional[str] = None) -> User:\n        \"\"\"\n        Create a new user and persist to DB. Raises ValueError if email exists.\n        This is async so router can: await user_service.create_user(...)\n        \"\"\"\n        existing = await user_repo.get_by_email(db, email)",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "user_service",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "user_service = UserService()",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI(title=\"Task Manager API\", lifespan=lifespan)\n# Configure CORS (adjust origins for security; \"*\" is permissive)\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# -------------- ROUTERS / API --------------\n# IMPORTANT: Be careful with prefixes — see note below.",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.Scripts.jp",
        "description": "env.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "env.Scripts.jp",
        "documentation": {}
    }
]